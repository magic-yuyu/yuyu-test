// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tenant.sql

package database

import (
	"context"
)

const createTenant = `-- name: CreateTenant :one
INSERT INTO tenants (id, name, api_secret_key_hash, api_public_key)
VALUES ($1, $2, $3, $4)
RETURNING id, name, api_secret_key_hash, api_public_key, created_at
`

type CreateTenantParams struct {
	ID               string `json:"id"`
	Name             string `json:"name"`
	ApiSecretKeyHash string `json:"api_secret_key_hash"`
	ApiPublicKey     string `json:"api_public_key"`
}

func (q *Queries) CreateTenant(ctx context.Context, arg CreateTenantParams) (Tenant, error) {
	row := q.db.QueryRowContext(ctx, createTenant,
		arg.ID,
		arg.Name,
		arg.ApiSecretKeyHash,
		arg.ApiPublicKey,
	)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ApiSecretKeyHash,
		&i.ApiPublicKey,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTenant = `-- name: DeleteTenant :exec
DELETE FROM tenants WHERE id = $1
`

func (q *Queries) DeleteTenant(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteTenant, id)
	return err
}

const getTenantByID = `-- name: GetTenantByID :one
SELECT id, name, api_secret_key_hash, api_public_key, created_at FROM tenants WHERE id = $1
`

func (q *Queries) GetTenantByID(ctx context.Context, id string) (Tenant, error) {
	row := q.db.QueryRowContext(ctx, getTenantByID, id)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ApiSecretKeyHash,
		&i.ApiPublicKey,
		&i.CreatedAt,
	)
	return i, err
}

const getTenantByPublicKey = `-- name: GetTenantByPublicKey :one
SELECT id, name, api_secret_key_hash, api_public_key, created_at FROM tenants WHERE api_public_key = $1
`

func (q *Queries) GetTenantByPublicKey(ctx context.Context, apiPublicKey string) (Tenant, error) {
	row := q.db.QueryRowContext(ctx, getTenantByPublicKey, apiPublicKey)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ApiSecretKeyHash,
		&i.ApiPublicKey,
		&i.CreatedAt,
	)
	return i, err
}

const getTenantBySecretKeyHash = `-- name: GetTenantBySecretKeyHash :one
SELECT id, name, api_secret_key_hash, api_public_key, created_at FROM tenants WHERE api_secret_key_hash = $1
`

func (q *Queries) GetTenantBySecretKeyHash(ctx context.Context, apiSecretKeyHash string) (Tenant, error) {
	row := q.db.QueryRowContext(ctx, getTenantBySecretKeyHash, apiSecretKeyHash)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ApiSecretKeyHash,
		&i.ApiPublicKey,
		&i.CreatedAt,
	)
	return i, err
}

const listTenants = `-- name: ListTenants :many
SELECT id, name, api_secret_key_hash, api_public_key, created_at FROM tenants ORDER BY created_at DESC
`

func (q *Queries) ListTenants(ctx context.Context) ([]Tenant, error) {
	rows, err := q.db.QueryContext(ctx, listTenants)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tenant{}
	for rows.Next() {
		var i Tenant
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ApiSecretKeyHash,
			&i.ApiPublicKey,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTenant = `-- name: UpdateTenant :one
UPDATE tenants 
SET name = $2, api_secret_key_hash = $3, api_public_key = $4
WHERE id = $1
RETURNING id, name, api_secret_key_hash, api_public_key, created_at
`

type UpdateTenantParams struct {
	ID               string `json:"id"`
	Name             string `json:"name"`
	ApiSecretKeyHash string `json:"api_secret_key_hash"`
	ApiPublicKey     string `json:"api_public_key"`
}

func (q *Queries) UpdateTenant(ctx context.Context, arg UpdateTenantParams) (Tenant, error) {
	row := q.db.QueryRowContext(ctx, updateTenant,
		arg.ID,
		arg.Name,
		arg.ApiSecretKeyHash,
		arg.ApiPublicKey,
	)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ApiSecretKeyHash,
		&i.ApiPublicKey,
		&i.CreatedAt,
	)
	return i, err
}
