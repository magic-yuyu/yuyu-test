// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/sqlc-dev/pqtype"
)

const createRefreshToken = `-- name: CreateRefreshToken :exec
INSERT INTO user_refresh_tokens (user_id, token_hash, expires_at, created_at, client_ip, user_agent)
VALUES ($1, $2, $3, NOW(), $4, $5)
`

type CreateRefreshTokenParams struct {
	UserID    string         `json:"user_id"`
	TokenHash string         `json:"token_hash"`
	ExpiresAt time.Time      `json:"expires_at"`
	ClientIp  sql.NullString `json:"client_ip"`
	UserAgent sql.NullString `json:"user_agent"`
}

// 用户Refresh Token表
func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, createRefreshToken,
		arg.UserID,
		arg.TokenHash,
		arg.ExpiresAt,
		arg.ClientIp,
		arg.UserAgent,
	)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, tenant_id, email, hashed_password, profile)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, tenant_id, email, hashed_password, profile, created_at
`

type CreateUserParams struct {
	ID             string                `json:"id"`
	TenantID       string                `json:"tenant_id"`
	Email          string                `json:"email"`
	HashedPassword sql.NullString        `json:"hashed_password"`
	Profile        pqtype.NullRawMessage `json:"profile"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.TenantID,
		arg.Email,
		arg.HashedPassword,
		arg.Profile,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Email,
		&i.HashedPassword,
		&i.Profile,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAllRefreshTokens = `-- name: DeleteAllRefreshTokens :exec
DELETE FROM user_refresh_tokens WHERE user_id = $1
`

func (q *Queries) DeleteAllRefreshTokens(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, deleteAllRefreshTokens, userID)
	return err
}

const deleteRefreshToken = `-- name: DeleteRefreshToken :exec
DELETE FROM user_refresh_tokens WHERE user_id = $1 AND token_hash = $2
`

type DeleteRefreshTokenParams struct {
	UserID    string `json:"user_id"`
	TokenHash string `json:"token_hash"`
}

func (q *Queries) DeleteRefreshToken(ctx context.Context, arg DeleteRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, deleteRefreshToken, arg.UserID, arg.TokenHash)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1 AND tenant_id = $2
`

type DeleteUserParams struct {
	ID       string `json:"id"`
	TenantID string `json:"tenant_id"`
}

func (q *Queries) DeleteUser(ctx context.Context, arg DeleteUserParams) error {
	_, err := q.db.ExecContext(ctx, deleteUser, arg.ID, arg.TenantID)
	return err
}

const getRefreshToken = `-- name: GetRefreshToken :one
SELECT id, user_id, token_hash, expires_at, created_at, client_ip, user_agent FROM user_refresh_tokens WHERE user_id = $1 AND token_hash = $2 AND expires_at > NOW()
`

type GetRefreshTokenParams struct {
	UserID    string `json:"user_id"`
	TokenHash string `json:"token_hash"`
}

func (q *Queries) GetRefreshToken(ctx context.Context, arg GetRefreshTokenParams) (UserRefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getRefreshToken, arg.UserID, arg.TokenHash)
	var i UserRefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TokenHash,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.ClientIp,
		&i.UserAgent,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, tenant_id, email, hashed_password, profile, created_at FROM users WHERE tenant_id = $1 AND email = $2
`

type GetUserByEmailParams struct {
	TenantID string `json:"tenant_id"`
	Email    string `json:"email"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, arg GetUserByEmailParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, arg.TenantID, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Email,
		&i.HashedPassword,
		&i.Profile,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, tenant_id, email, hashed_password, profile, created_at FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Email,
		&i.HashedPassword,
		&i.Profile,
		&i.CreatedAt,
	)
	return i, err
}

const getUserCountByTenant = `-- name: GetUserCountByTenant :one
SELECT COUNT(*) FROM users WHERE tenant_id = $1
`

func (q *Queries) GetUserCountByTenant(ctx context.Context, tenantID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUserCountByTenant, tenantID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUsersByTenant = `-- name: GetUsersByTenant :many
SELECT id, tenant_id, email, hashed_password, profile, created_at FROM users WHERE tenant_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetUsersByTenant(ctx context.Context, tenantID string) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsersByTenant, tenantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.TenantID,
			&i.Email,
			&i.HashedPassword,
			&i.Profile,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users 
SET email = $3, hashed_password = $4, profile = $5
WHERE id = $1 AND tenant_id = $2
RETURNING id, tenant_id, email, hashed_password, profile, created_at
`

type UpdateUserParams struct {
	ID             string                `json:"id"`
	TenantID       string                `json:"tenant_id"`
	Email          string                `json:"email"`
	HashedPassword sql.NullString        `json:"hashed_password"`
	Profile        pqtype.NullRawMessage `json:"profile"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.TenantID,
		arg.Email,
		arg.HashedPassword,
		arg.Profile,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Email,
		&i.HashedPassword,
		&i.Profile,
		&i.CreatedAt,
	)
	return i, err
}
